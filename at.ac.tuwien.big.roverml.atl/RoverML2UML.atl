-- @path RML=/at.ac.tuwien.big.roverml.atl/metamodels/roverml.ecore
-- @nsURI UML=http://www.eclipse.org/uml2/5.0.0/UML
-- @nsURI Profile=http://www.eclipse.org/uml2/5.0.0/UML


module RoverML2UML;
create OUT: UML from IN: RML, P: Profile;

helper def: getStereotype(name: String): UML!Stereotype = Profile!Stereotype.allInstances() -> any(x | x.name = name);

rule system2package {
	from
		system: RML!RoverSystem
	to
		package: UML!Package (
			packagedElement <- system.rovers,
			packagedElement <- system.roverPrograms
		)
	do {
			-- Apply the rover profile to the targeted UML element
			package.applyProfile(Profile!Profile.allInstances() -> first());
		}
}

-- TODO: Complete this rule
rule rover2package {
	from
		rover: RML!Rover
	to
		package: UML!Package (
			name <- rover.name,
			packagedElement <- rover.components			
		)
}

-- TODO: Complete this rule
rule program2activity {
	from
		program: RML!RoverProgram
	to
		activity: UML!Activity (
			name <- program.name,
			ownedNode <- program.block,
			package <- program.rover,
			group <- program.block
		)
}

rule comp2component {
	from 
		comp: RML!Component
	to
		component: UML!Component (
			name <- comp.name
		)
	do {
		if (comp.oclIsKindOf(RML!Actuator)) {
			component.applyStereotype(thisModule.getStereotype('Actuator'));
		}
		if (comp.oclIsKindOf(RML!Sensor)) {
			component.applyStereotype(thisModule.getStereotype('Sensor'));
		}
	}
}

-- TODO: Complete this rule
rule block2structuredActivityNode {
	from
		block: RML!Block
	to
		node: UML!StructuredActivityNode (
			
			node <- block.commands,
			edge <- block.transitions
		)
	do {
		if (block.oclIsTypeOf(RML!Repeat)) {
			-- Apply the stereotype to the targeted UML element
			node.applyStereotype(thisModule.getStereotype('Repeat'));
			-- Set the property value of the applied stereotype
			node.setValue(thisModule.getStereotype('Repeat'), 'count', block.count);
		}
	}
}

rule transition2controlFlow {
	from
		trans: RML!Transition
	to
		controlFlow: UML!ControlFlow (
				name <- trans.name,
				source <- trans.source,
				target <- trans.target
		)
	do {
		if (trans.oclIsTypeOf(RML!Transition)) {
			controlFlow.applyStereotype(thisModule.getStereotype('Transition'));
		}
		if (trans.oclIsKindOf(RML!TriggeredTransition)) {
			controlFlow.applyStereotype(thisModule.getStereotype('TriggeredTransition'));
		}
	}
}

abstract rule command2opaqueAction {
	from
		com: RML!Command(not com.oclIsTypeOf(RML!Repeat) and not com.oclIsTypeOf(RML!Terminate))
	to
		action: UML!OpaqueAction (
			name <- com.name	
			
		)
}

rule move2opaqueAction extends command2opaqueAction {
	from
		com: RML!Move
	do {
		action.applyStereotype(thisModule.getStereotype('Move'));
		action.setValue(action.getAppliedStereotypes() -> first(), 'speed', com.speed.value);
		action.setValue(action.getAppliedStereotypes() -> first(), 'distance', com.distance.value);
	}
}

rule rotate2opaqueAction extends command2opaqueAction {
	from
		com: RML!Rotate
	do {
		action.applyStereotype(thisModule.getStereotype('Rotate'));
		action.setValue(action.getAppliedStereotypes() -> first(), 'angle', com.angle.value);
	}
}

rule wait2opaqueAction extends command2opaqueAction {
	from
		com: RML!Wait
	do {
		action.applyStereotype(thisModule.getStereotype('Wait'));
		action.setValue(action.getAppliedStereotypes() -> first(), 'duration', com.duration.value);
	}
}

rule setLightColor2opaqueAction extends command2opaqueAction {
	from
		com: RML!SetLightColor
	do {
		action.applyStereotype(thisModule.getStereotype('SetLightColor'));
		action.setValue(action.getAppliedStereotypes() -> first(), 'color', com.color.toString());
		action.setValue(action.getAppliedStereotypes() -> first(), 'lights', com.lights.toString());
	}
}

rule terminate2node {
	from
		term: RML!Terminate
	to
		node: UML!ActivityFinalNode
	do {
		
		node.applyStereotype(thisModule.getStereotype('Terminate'));
	}
}
