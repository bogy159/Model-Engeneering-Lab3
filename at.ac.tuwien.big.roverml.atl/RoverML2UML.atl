-- @path RML=/at.ac.tuwien.big.roverml.atl/metamodels/roverml.ecore
-- @nsURI UML=http://www.eclipse.org/uml2/5.0.0/UML
-- @nsURI Profile=http://www.eclipse.org/uml2/5.0.0/UML


module RoverML2UML;
create OUT: UML from IN: RML, P: Profile;

rule system2package {
	from
		system: RML!RoverSystem
	to
		package: UML!Package (
			packagedElement <- system.rovers,
			packagedElement <- system.roverPrograms
		)
	do {
			-- Apply the rover profile to the targeted UML element
			package.applyProfile(Profile!Profile.allInstances() -> first());
		}
}

-- TODO: Complete this rule
rule rover2package {
	from
		rover: RML!Rover
	to
		package: UML!Package (
			name <- rover.name,
			packagedElement <- rover.components			
		)
}

-- TODO: Complete this rule
rule program2activity {
	from
		program: RML!RoverProgram
	to
		activity: UML!Activity (
			name <- program.name,
			ownedNode <- program.block,
			ownedElement <- program.rover,
			group <- program.block
		)
}

rule comp2component {
	from 
		comp: RML!Component
	to
		component: UML!Component (
			name <- comp.name
		)
	do {
		component.applyStereotype(Profile!Stereotype.allInstances() -> any(s | s.name = 'Actuator'));
		component.applyStereotype(Profile!Stereotype.allInstances() -> any(s | s.name = 'Sensor'));
	}
}

-- TODO: Complete this rule
rule block2structuredActivityNode {
	from
		block: RML!Block
	to
		node: UML!StructuredActivityNode (
			-- TODO nodes -> commands and edges -> transitions
		)
	do {
		if (block.oclIsTypeOf(RML!Repeat)) {
			-- Apply the stereotype to the targeted UML element
			node.applyStereotype(Profile!Stereotype.allInstances() -> any(s | s.name = 'Repeat'));
			-- Set the property value of the applied stereotype
			node.setValue(node.getAppliedStereotypes() -> first(), 'count', block.count);
		}
	}
}

rule transition2controlFlow {
	from
		trans: RML!Transition
	to
		controlFlow: UML!ControlFlow (
				name <- trans.name,
				source <- trans.source,
				target <- trans.target
		)
	do {
		controlFlow.applyStereotype(Profile!Stereotype.allInstances() -> any(s | s.name = 'Transition'));
		controlFlow.applyStereotype(Profile!Stereotype.allInstances() -> any(s | s.name = 'TriggeredTransition'));
	}
}

rule command2opaqueAction {
	from
		com: RML!Command
	to
		action: UML!OpaqueAction (
			name <- com.name
			
		)
}

rule genAttribute(name: String, value: String) {
	to
		att: AML!Attribute (
			name <- name,
			value <- value
		)
	do {
		att; 
	}
}
